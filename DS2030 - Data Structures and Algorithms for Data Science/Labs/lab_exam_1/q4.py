# -*- coding: utf-8 -*-
"""q4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CrDn8VVkK8GSE0ppLeQuQs5EMDqiUkqL
"""

# Node class to represent each node in the binary tree
class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


def check(head, node_number, parent, left, right):
    '''
    function to  make a tree, or rather add elements to the tree
    '''
    if head.left is not None:
        if head.left.value == node_number:
            # checks if the given values are of left child of the given head node
            # and then adds it left child or right child
            if left:
                head.left.left = Node(left)
            if right:
                head.left.right = Node(right)
            return
    if head.right is not None:
            # checks if the given values are of right child of the given head node
            # and then adds it left child or right child
        if head.right.value == node_number:
            if left:
                head.right.left = Node(left)
            if right:
                head.right.right = Node(right)
            return 
    # recursively checks the correct position of the nodes
    if head.left is not None:
        check(head.left, node_number, parent, left, right)
    if head.right is not None:
        check(head.right, node_number, parent, left, right)
    return head


# Implement this function to read the tree structure from a file
def parse_tree(file_path):
    """
    Parse the binary tree structure from a file and build it using lists.

    :param file_path: The path to the file containing the binary tree structure
    :return: The root node of the binary tree
    """
    # TODO
    
    # since its given that root always starts from 1
    with open(file_path) as txt_file:
       # reading from the text file
       lines = txt_file.readlines()
    
    number_of_nodes = int(lines[0])
    # dummy = tree
    tree = Node(1)
    # initial tree node
    # since its given that root always starts from 1
    for line in lines[1:]:
        vals = [int(x)for x in line.split()]
        # getting the values of the node_number, parent, left child and the right child of that we ot form the text file
        node_number = vals[0]
        parent = vals[1]
        left = vals[2]
        right = vals[3]
        if parent == 0:
            # adding the left child and right child for the root
            if left:
               tree.left = Node(left)
            if right:
                tree.right = Node(right)
            continue
        # calling the recursive function if its not the root to add elements
        check(tree, node_number, parent, left, right)
    return tree

# Implement this function to recursively swap the left and right children
def swap_children(node):
    """
    Recursively swap the left and right children of every node in the tree.

    :param node: The current node being processed
    """
    # TODO
    if node.left==None and node.right==None:
        # base case
        return
    # swapping the nodes
    temp = node.left
    node.left = node.right
    node.right = temp
    # recursively calling the functions
    if node.left:
        swap_children(node.left)
    if node.right:
        swap_children(node.right)

# Helper function for pre-order traversal to verify the tree structure
def pre_order_traversal(node):
    """
    implement the pre-order traversal to verify the tree structure
    :param node: The current node being processed
    """
    # TODO
    if node is None:
        # base case
        return
    # printing the value
    print(node.value, end=" ")
    # recursivly calling
    if node.left:
        pre_order_traversal(node.left)
    if node.right:
        pre_order_traversal(node.right)


# Main function to run the lab
if __name__ == "__main__":
    # Parse the binary tree from a text file (replace 'tree.txt' with your file path)
    root = parse_tree('tree.txt')

    print("Original tree pre-order traversal:")
    pre_order_traversal(root)
    print()

    # Swap the children
    swap_children(root)

    print("Tree after swapping children pre-order traversal:")
    pre_order_traversal(root)
    print()