# -*- coding: utf-8 -*-
"""q3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16RQ5sIPmBEiLBGDp28yLDSu08bdtOmhf
"""

class Stack:
    def __init__(self):
        """
        Initialize an empty stack.
        """
        self.items = []

    def push(self, item):
        """
        Push an item onto the stack.
        """
        self.items.append(item)

    def pop(self):
        """
        Remove and return the top item from the stack.
        """
        if not self.is_empty():
            return self.items.pop()
        else:
            raise IndexError("Pop from an empty stack")

    def peek(self):
        """
        Return the top item from the stack without removing it.
        """
        if not self.is_empty():
            return self.items[-1]
        else:
            raise IndexError("Peek from an empty stack")

    def is_empty(self):
        """
        Check if the stack is empty.
        """
        return len(self.items) == 0

    def size(self):
        """
        Return the number of items in the stack.
        """
        return len(self.items)



class QueueUsingTwoStacks:
    def __init__(self):
        """
        Initialize a queue using two stacks.
        """
        self.stack_in = Stack()
        self.stack_out = Stack()

    def enqueue(self, item):
        """
        Add an item to the queue.
        """
        # TODO
        if self.stack_out.is_empty():
            # storing the first element in stack_out
            self.stack_out.push(item)
        
        else:
            # storing every other element is stack_in
            self.stack_in.push(item)

    def dequeue(self):
        """
        Remove and return an item from the queue.
        """
        # TODO:
        if self.stack_out.is_empty():
            raise IndexError
        else:
            temp = self.stack_out.pop()
            # the first element, the element that has to be returned
            if self.stack_in.is_empty():
                # if there are no more elements, we return it
                return temp
            while not self.stack_in.is_empty():
                # else we add the remaining elements into stack_out
                # until all the elements are added
                self.stack_out.push(self.stack_in.pop())
            
            temp_2 = self.stack_out.pop()
            # the last element that gets added to the stack_out is the second element of the queue
            # which will now become the first element due to the deque operation
            while self.stack_out.size()>0:
                # we now add the remaining elements back into stack_in
                self.stack_in.push(self.stack_out.pop())
            # and now we add temp_2 to stack_out
            self.stack_out.push(temp_2)
            # we return the first element
            return temp

    def is_empty(self):
        """
        Check if the queue is empty.
        """
        # TODO:
        return self.stack_out.is_empty()

    def peek(self):
        """
        Return the front item from the queue without removing it.
        """
        # TODO:
        if self.stack_out.is_empty():
            raise IndexError
        else:
            return self.stack_out.peek()

def run_queue_tests():
    # Initialize the queue
    queue = QueueUsingTwoStacks()

    print("Initial Queue State: (empty)", queue.is_empty())  # Expect True

    # Test enqueue operation
    print("Enqueue 10")
    queue.enqueue(10)
    print("Enqueue 20")
    queue.enqueue(20)
    print("Enqueue 30")
    queue.enqueue(30)

    # Check queue state after enqueuing
    print("Queue State: (not empty)", queue.is_empty())  # Expect False

    # Test peek
    print("Peek Front Element: (should be 10)", queue.peek())  # Expect 10

    # Test dequeue operation
    print("Dequeue Element: (should be 10)", queue.dequeue())  # Expect 10
    print("Peek Front Element: (should be 20)", queue.peek())  # Expect 20

    print("Dequeue Element: (should be 20)", queue.dequeue())  # Expect 20
    print("Dequeue Element: (should be 30)", queue.dequeue())  # Expect 30

    # Test is_empty after dequeueing all elements
    print("Queue State after dequeuing all elements: (empty)", queue.is_empty())  # Expect True

    # Test dequeue on empty queue
    try:
        print("Attempt to dequeue from empty queue:")
        queue.dequeue()
    except IndexError as e:
        print("Caught exception:", e) # Expect exception

    # Test peek on empty queue
    try:
        print("Attempt to peek from empty queue:")
        queue.peek()
    except IndexError as e:
        print("Caught exception:", e)  # Expect exception


if __name__ == "__main__":
    run_queue_tests()